name: ci
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        options:
          - info
          - debug

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv (Unix)
        if: runner.os != 'Windows'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install uv (Windows)
        if: runner.os == 'Windows'
        run: |
          powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
          echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix llvm)/include" >> $GITHUB_ENV
          echo "PATH=$(brew --prefix llvm)/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          uv --version
          uv sync --dev

      - name: Run tests
        run: uv run pytest tests/test_synth.py -v

      - name: Run linting (optional)
        run: |
          uv run ruff check . || true
          uv run mypy . || true
        continue-on-error: true

  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test  # Only build wheels after tests pass
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.1

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Configure cibuildwheel to build wheels for Python 3.9-3.12
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
          CIBW_SKIP: "*-musllinux* *-manylinux_i686"

          # Linux specific settings
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014

          # macOS specific settings
          CIBW_BEFORE_ALL_MACOS: >
            brew install llvm
          CIBW_ENVIRONMENT_MACOS: >
            PATH="/opt/homebrew/opt/llvm/bin:$PATH"
            CC="/opt/homebrew/opt/llvm/bin/clang"
            CXX="/opt/homebrew/opt/llvm/bin/clang++"
            LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
            CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
            MACOSX_DEPLOYMENT_TARGET="14.0"

          # Use uv for build frontend
          CIBW_BUILD_FRONTEND: build

          # Test command to verify wheels work
          CIBW_TEST_COMMAND: python -c "import realsense_align; print('Import successful')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  upload:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_UPLOAD_TOKEN }}
          packages_dir: dist/*/

  publish_to_testpypi:
    name: Publish to TestPyPI
    needs: build_and_test_wheels
    runs-on: ubuntu-latest
    # This job will only run when you trigger it manually
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use the new secret for TestPyPI
          password: ${{ secrets.TESTPYPI_UPLOAD_TOKEN }}
          # This URL points the action to the TestPyPI repository
          repository_url: https://test.pypi.org/legacy/
